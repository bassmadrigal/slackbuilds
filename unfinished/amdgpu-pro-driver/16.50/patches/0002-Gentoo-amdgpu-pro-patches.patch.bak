From e53070241c33100571d9e379241469826f5e681f Mon Sep 17 00:00:00 2001
From: Jeremy Hansen <jebrhansen@gmail.com>
Date: Tue, 24 Jan 2017 18:13:04 -0500
Subject: [PATCH 01/11] Add Slackware support

---
 usr/src/amdgpu-pro-16.50-362463/amd/backport/Makefile | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/backport/Makefile b/usr/src/amdgpu-pro-16.50-362463/amd/backport/Makefile
index a6ab7fe..6709c5e 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/backport/Makefile
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/backport/Makefile
@@ -22,6 +22,8 @@ else ifeq ("sled",$(OS_NAME))
 ccflags-y += -DOS_NAME_SLE
 else ifeq ("sles",$(OS_NAME))
 ccflags-y += -DOS_NAME_SLE
+else ifeq ("slackware",$(OS_NAME))
+ccflags-y += -DOS_NAME_SLACKWARE
 else
 ccflags-y += -DOS_NAME_UNKNOWN
 endif
-- 
2.9.0


From 90c9e09497fe9123156bb15996fbca5b7d7ac0b0 Mon Sep 17 00:00:00 2001
From: Jeremy Hansen <jebrhansen@gmail.com>
Date: Tue, 24 Jan 2017 18:35:28 -0500
Subject: [PATCH 02/11] Remove extra parameter from ttm_bo_reserve for 4.7.0

Thanks to laguest and corngood
---
 .../amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_ttm.h | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_ttm.h b/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_ttm.h
index 6e5a170..1d00d1d 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_ttm.h
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_ttm.h
@@ -113,9 +113,13 @@ static inline int kcl_ttm_bo_reserve(struct ttm_buffer_object *bo,
 				 struct ww_acquire_ctx *ticket)
 {
 #if defined(BUILD_AS_DKMS)
-	return ttm_bo_reserve(bo, interruptible, no_wait, false, ticket);
-#else
-	return ttm_bo_reserve(bo, interruptible, no_wait, ticket);
+	#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 7, 0)
+		return ttm_bo_reserve(bo, interruptible, no_wait, ticket);
+	#else
+		return ttm_bo_reserve(bo, interruptible, no_wait, false, ticket);
+	#endif
+	#else
+		return ttm_bo_reserve(bo, interruptible, no_wait, ticket);
 #endif
 }
 
-- 
2.9.0


From 490c8b2728f277159046ad5ff97b66d4ea78e2eb Mon Sep 17 00:00:00 2001
From: Jeremy Hansen <jebrhansen@gmail.com>
Date: Tue, 24 Jan 2017 18:37:23 -0500
Subject: [PATCH 03/11] Change seq_printf format for 64 bit context

Thanks to laguest and corngood
---
 usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_sa.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_sa.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_sa.c
index 052f745..5886b9a 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_sa.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_sa.c
@@ -428,7 +428,7 @@ void amdgpu_sa_bo_dump_debug_info(struct amdgpu_sa_manager *sa_manager,
 			   soffset, eoffset, eoffset - soffset);
 
 		if (i->fence)
-#if defined(BUILD_AS_DKMS)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
 			seq_printf(m, " protected by 0x%08x on context %d",
 				   i->fence->seqno, i->fence->context);
 #else
-- 
2.9.0


From 43d1c0c09d3aaf20a06549828e190942a8d7371f Mon Sep 17 00:00:00 2001
From: Jeremy Hansen <jebrhansen@gmail.com>
Date: Tue, 24 Jan 2017 18:41:38 -0500
Subject: [PATCH 04/11] Fix vblank calls

Thanks to laguest and corngood
---
 usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_display.c   | 8 ++++++++
 usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v10_0.c        | 4 ++++
 usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v11_0.c        | 4 ++++
 usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v8_0.c         | 4 ++++
 usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_virtual.c      | 8 ++++++++
 usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm.c | 4 ++++
 6 files changed, 32 insertions(+)

diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_display.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_display.c
index 8425b1d..d6cd383 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_display.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_display.c
@@ -268,7 +268,11 @@ int amdgpu_crtc_page_flip(struct drm_crtc *crtc,
 
 	work->base = base;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+	r = drm_crtc_vblank_get(crtc);
+#else
 	r = drm_vblank_get(crtc->dev, amdgpu_crtc->crtc_id);
+#endif
 	if (r) {
 		DRM_ERROR("failed to get vblank before flip\n");
 		goto pflip_cleanup;
@@ -296,7 +300,11 @@ int amdgpu_crtc_page_flip(struct drm_crtc *crtc,
 	return 0;
 
 vblank_cleanup:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+	drm_crtc_vblank_put(&amdgpu_crtc->base);
+#else
 	drm_vblank_put(crtc->dev, amdgpu_crtc->crtc_id);
+#endif
 
 pflip_cleanup:
 	if (unlikely(amdgpu_bo_reserve(new_abo, false) != 0)) {
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v10_0.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v10_0.c
index 650d193..b1880ac 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v10_0.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v10_0.c
@@ -3342,7 +3342,11 @@ static int dce_v10_0_pageflip_irq(struct amdgpu_device *adev,
 
 	spin_unlock_irqrestore(&adev->ddev->event_lock, flags);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+	drm_crtc_vblank_put(&amdgpu_crtc->base);
+#else
 	drm_vblank_put(adev->ddev, amdgpu_crtc->crtc_id);
+#endif
 	schedule_work(&works->unpin_work);
 
 	return 0;
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v11_0.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v11_0.c
index ca03d8e..b654b64 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v11_0.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v11_0.c
@@ -3391,7 +3391,11 @@ static int dce_v11_0_pageflip_irq(struct amdgpu_device *adev,
 
 	spin_unlock_irqrestore(&adev->ddev->event_lock, flags);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+	drm_crtc_vblank_put(&amdgpu_crtc->base);
+#else
 	drm_vblank_put(adev->ddev, amdgpu_crtc->crtc_id);
+#endif
 	schedule_work(&works->unpin_work);
 
 	return 0;
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v8_0.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v8_0.c
index 8e4dff7..b598caa 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v8_0.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v8_0.c
@@ -3252,7 +3252,11 @@ static int dce_v8_0_pageflip_irq(struct amdgpu_device *adev,
 
 	spin_unlock_irqrestore(&adev->ddev->event_lock, flags);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+	drm_crtc_vblank_put(&amdgpu_crtc->base);
+#else
 	drm_vblank_put(adev->ddev, amdgpu_crtc->crtc_id);
+#endif
 	schedule_work(&works->unpin_work);
 
 	return 0;
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_virtual.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_virtual.c
index 0c6e873..36e2094 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_virtual.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_virtual.c
@@ -746,11 +746,19 @@ static int dce_virtual_pageflip_irq(struct amdgpu_device *adev,
 
 	/* wakeup usersapce */
 	if (works->event)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+    drm_crtc_send_vblank_event(&amdgpu_crtc->base, works->event);
+#else
 		drm_send_vblank_event(adev->ddev, crtc_id, works->event);
+#endif
 
 	spin_unlock_irqrestore(&adev->ddev->event_lock, flags);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+	drm_crtc_vblank_put(&amdgpu_crtc->base);
+#else
 	drm_vblank_put(adev->ddev, amdgpu_crtc->crtc_id);
+#endif
 	schedule_work(&works->unpin_work);
 
 	return 0;
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm.c b/usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm.c
index c5fcf5a..e9892d8 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm.c
@@ -213,10 +213,14 @@ static void dm_pflip_high_irq(void *interrupt_params)
 
 	/* wakeup usersapce */
 	if(works->event)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+		drm_crtc_send_vblank_event(&amdgpu_crtc->base, works->event);
+#else
 		drm_send_vblank_event(
 			adev->ddev,
 			amdgpu_crtc->crtc_id,
 			works->event);
+#endif
 
 	spin_unlock_irqrestore(&adev->ddev->event_lock, flags);
 
-- 
2.9.0


From 36c451dbc4210316166c0ee0e530cfc7b5b41b0c Mon Sep 17 00:00:00 2001
From: Jeremy Hansen <jebrhansen@gmail.com>
Date: Tue, 24 Jan 2017 18:43:19 -0500
Subject: [PATCH 05/11] Fix crtc_gamma functions for 4.8.0

Thanks to laguest and corngood
---
 .../amdgpu-pro-16.50-362463/amd/amdgpu/dce_v10_0.c    | 19 +++++++++++++++++++
 .../amdgpu-pro-16.50-362463/amd/amdgpu/dce_v11_0.c    | 19 +++++++++++++++++++
 usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v8_0.c | 19 +++++++++++++++++++
 .../amd/dal/amdgpu_dm/amdgpu_dm_types.c               | 12 ++++++++++++
 4 files changed, 69 insertions(+)

diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v10_0.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v10_0.c
index b1880ac..53746fa 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v10_0.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v10_0.c
@@ -2627,6 +2627,24 @@ static void dce_v10_0_cursor_reset(struct drm_crtc *crtc)
 	}
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+static int dce_v10_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
+				    u16 *blue, uint32_t size)
+{
+	struct amdgpu_crtc *amdgpu_crtc = to_amdgpu_crtc(crtc);
+	int i;
+
+	/* userspace palettes are always correct as is */
+	for (i = 0; i < size; i++) {
+		amdgpu_crtc->lut_r[i] = red[i] >> 6;
+		amdgpu_crtc->lut_g[i] = green[i] >> 6;
+		amdgpu_crtc->lut_b[i] = blue[i] >> 6;
+	}
+	dce_v10_0_crtc_load_lut(crtc);
+
+	return 0;
+}
+#else
 static void dce_v10_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
 				    u16 *blue, uint32_t start, uint32_t size)
 {
@@ -2641,6 +2659,7 @@ static void dce_v10_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green
 	}
 	dce_v10_0_crtc_load_lut(crtc);
 }
+#endif
 
 static void dce_v10_0_crtc_destroy(struct drm_crtc *crtc)
 {
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v11_0.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v11_0.c
index b654b64..3edd66d 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v11_0.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v11_0.c
@@ -2643,6 +2643,24 @@ static void dce_v11_0_cursor_reset(struct drm_crtc *crtc)
 	}
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+static int dce_v11_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
+				    u16 *blue, uint32_t size)
+{
+	struct amdgpu_crtc *amdgpu_crtc = to_amdgpu_crtc(crtc);
+	int i;
+
+	/* userspace palettes are always correct as is */
+	for (i = 0; i < size; i++) {
+		amdgpu_crtc->lut_r[i] = red[i] >> 6;
+		amdgpu_crtc->lut_g[i] = green[i] >> 6;
+		amdgpu_crtc->lut_b[i] = blue[i] >> 6;
+	}
+	dce_v11_0_crtc_load_lut(crtc);
+
+	return 0;
+}
+#else
 static void dce_v11_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
 				    u16 *blue, uint32_t start, uint32_t size)
 {
@@ -2657,6 +2675,7 @@ static void dce_v11_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green
 	}
 	dce_v11_0_crtc_load_lut(crtc);
 }
+#endif
 
 static void dce_v11_0_crtc_destroy(struct drm_crtc *crtc)
 {
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v8_0.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v8_0.c
index b598caa..d203894 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v8_0.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v8_0.c
@@ -2478,6 +2478,24 @@ static void dce_v8_0_cursor_reset(struct drm_crtc *crtc)
 	}
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+static int dce_v8_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
+				    u16 *blue, uint32_t size)
+{
+	struct amdgpu_crtc *amdgpu_crtc = to_amdgpu_crtc(crtc);
+	int i;
+
+	/* userspace palettes are always correct as is */
+	for (i = 0; i < size; i++) {
+		amdgpu_crtc->lut_r[i] = red[i] >> 6;
+		amdgpu_crtc->lut_g[i] = green[i] >> 6;
+		amdgpu_crtc->lut_b[i] = blue[i] >> 6;
+	}
+	dce_v8_0_crtc_load_lut(crtc);
+
+	return 0;
+}
+#else
 static void dce_v8_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
 				    u16 *blue, uint32_t start, uint32_t size)
 {
@@ -2492,6 +2510,7 @@ static void dce_v8_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
 	}
 	dce_v8_0_crtc_load_lut(crtc);
 }
+#endif
 
 static void dce_v8_0_crtc_destroy(struct drm_crtc *crtc)
 {
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm_types.c b/usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm_types.c
index edc8e86..32755a9 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm_types.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm_types.c
@@ -998,6 +998,13 @@ void amdgpu_dm_crtc_destroy(struct drm_crtc *crtc)
 	kfree(crtc);
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+static int amdgpu_dm_atomic_crtc_gamma_set(struct drm_crtc *crtc,
+					   u16 *red,
+					   u16 *green,
+					   u16 *blue,
+					   uint32_t size)
+#else
 static void amdgpu_dm_atomic_crtc_gamma_set(
 		struct drm_crtc *crtc,
 		u16 *red,
@@ -1005,6 +1012,7 @@ static void amdgpu_dm_atomic_crtc_gamma_set(
 		u16 *blue,
 		uint32_t start,
 		uint32_t size)
+#endif
 {
 	struct drm_device *dev = crtc->dev;
 	struct drm_property *prop = dev->mode_config.prop_crtc_id;
@@ -1012,6 +1020,10 @@ static void amdgpu_dm_atomic_crtc_gamma_set(
 	crtc->state->mode.private_flags |= AMDGPU_CRTC_MODE_PRIVATE_FLAGS_GAMMASET;
 
 	drm_atomic_helper_crtc_set_property(crtc, prop, 0);
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+	return 0;
+#endif
 }
 
 static int dm_crtc_funcs_atomic_set_property(
-- 
2.9.0


From fba78363cabac73114af21f578c48bf6ddbc05d3 Mon Sep 17 00:00:00 2001
From: Jeremy Hansen <jebrhansen@gmail.com>
Date: Tue, 24 Jan 2017 18:44:37 -0500
Subject: [PATCH 06/11] Fix drm_atomic_helper_swap_state for 4.8.0

Thanks to laguest and corngood
---
 usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm_types.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm_types.c b/usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm_types.c
index 32755a9..60ca073 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm_types.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/dal/amdgpu_dm/amdgpu_dm_types.c
@@ -2528,7 +2528,11 @@ int amdgpu_dm_atomic_commit(
 	 * the software side now.
 	 */
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+	drm_atomic_helper_swap_state(state, true);
+#else
 	drm_atomic_helper_swap_state(dev, state);
+#endif
 
 	/*
 	 * From this point state become old state really. New state is
-- 
2.9.0


From 0c2f6188256a7e8884d46f82877e1a9b4fe6ab32 Mon Sep 17 00:00:00 2001
From: Jeremy Hansen <jebrhansen@gmail.com>
Date: Tue, 24 Jan 2017 18:45:32 -0500
Subject: [PATCH 07/11] Add extra flag to ttm_bo_move_ttm for >=4.8.0-rc2

Thanks to laguest and corngood
---
 usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_ttm.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_ttm.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_ttm.c
index 89760f8..d102224 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_ttm.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_ttm.c
@@ -428,7 +428,11 @@ static int amdgpu_move_vram_ram(struct ttm_buffer_object *bo,
 	if (unlikely(r)) {
 		goto out_cleanup;
 	}
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+	r = ttm_bo_move_ttm(bo, true, interruptible, no_wait_gpu, new_mem);
+#else
 	r = ttm_bo_move_ttm(bo, true, no_wait_gpu, new_mem);
+#endif
 out_cleanup:
 	ttm_bo_mem_put(bo, &tmp_mem);
 	return r;
@@ -461,7 +465,11 @@ static int amdgpu_move_ram_vram(struct ttm_buffer_object *bo,
 	if (unlikely(r)) {
 		return r;
 	}
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+	r = ttm_bo_move_ttm(bo, true, interruptible, no_wait_gpu, &tmp_mem);
+#else
 	r = ttm_bo_move_ttm(bo, true, no_wait_gpu, &tmp_mem);
+#endif
 	if (unlikely(r)) {
 		goto out_cleanup;
 	}
-- 
2.9.0


From 6b6ba495c1b95dcd84798dfa4730240e5f13fea6 Mon Sep 17 00:00:00 2001
From: Jeremy Hansen <jebrhansen@gmail.com>
Date: Tue, 24 Jan 2017 18:51:13 -0500
Subject: [PATCH 08/11] disable dal by default

Thanks tocorngood
---
 usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_drv.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_drv.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_drv.c
index d6b3f35..4477865 100755
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_drv.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/amdgpu_drv.c
@@ -88,7 +88,7 @@ int amdgpu_vm_fault_stop = 0;
 int amdgpu_vm_debug = 0;
 int amdgpu_vram_page_split = -1;
 int amdgpu_exp_hw_support = 0;
-int amdgpu_dal = -1;
+int amdgpu_dal = 0;
 int amdgpu_sched_jobs = 32;
 int amdgpu_sched_hw_submission = 2;
 int amdgpu_powerplay = -1;
-- 
2.9.0


From f327d02c3ac02306f0f326b2c4c90f074583e6a9 Mon Sep 17 00:00:00 2001
From: Jeremy Hansen <jebrhansen@gmail.com>
Date: Tue, 24 Jan 2017 18:51:36 -0500
Subject: [PATCH 09/11] Remove dependency on System.map

Thanks to corngood
---
 usr/src/amdgpu-pro-16.50-362463/amd/backport/Makefile    |  1 -
 usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_fence.c | 10 ++++++++--
 usr/src/amdgpu-pro-16.50-362463/amd/backport/symbols     |  7 -------
 3 files changed, 8 insertions(+), 10 deletions(-)
 delete mode 100644 usr/src/amdgpu-pro-16.50-362463/amd/backport/symbols

diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/backport/Makefile b/usr/src/amdgpu-pro-16.50-362463/amd/backport/Makefile
index 6709c5e..6527c73 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/backport/Makefile
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/backport/Makefile
@@ -61,7 +61,6 @@ ccflags-y += -DOS_NAME_RHEL_7_3
 endif
 endif
 
-BACKPORT_OBJS = symbols.o
 endif
 
 BACKPORT_OBJS += kcl_drm.o kcl_ttm.o kcl_amdgpu.o kcl_fence.o kcl_mn.o amdgpu_kcl.o kcl_fence_array.o kcl_kthread.o
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_fence.c b/usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_fence.c
index 54ad819..39f6d61 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_fence.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_fence.c
@@ -52,8 +52,14 @@ struct default_wait_cb {
 	struct task_struct *task;
 };
 
-extern void
-(*fence_default_wait_cb)(struct fence *fence, struct fence_cb *cb);
+static void
+fence_default_wait_cb(struct fence *fence, struct fence_cb *cb)
+{
+	struct default_wait_cb *wait =
+		container_of(cb, struct default_wait_cb, base);
+
+	wake_up_process(wait->task);
+}
 
 signed long
 _kcl_fence_wait_any_timeout(struct fence **fences, uint32_t count,
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/backport/symbols b/usr/src/amdgpu-pro-16.50-362463/amd/backport/symbols
deleted file mode 100644
index 68cae63..0000000
--- a/usr/src/amdgpu-pro-16.50-362463/amd/backport/symbols
+++ /dev/null
@@ -1,7 +0,0 @@
-SYMS=""
-
-SYMS+="fence_default_wait_cb"
-
-if version_lt 2.6.33; then
-    SYMS+=" kallsyms_lookup_name"
-fi
-- 
2.9.0


From ecd43fa1eb7d36082ece9bfc465e2abfac17068d Mon Sep 17 00:00:00 2001
From: Jeremy Hansen <jebrhansen@gmail.com>
Date: Tue, 24 Jan 2017 18:52:28 -0500
Subject: [PATCH 10/11] kcl fixes for 16.50 + linux-4.8

Thanks to corngood
---
 usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v6_0.c        |  5 +++--
 usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_virtual.c     |  5 +++--
 .../amd/backport/include/kcl/kcl_drm.h                       | 12 ++++++++++++
 .../amd/backport/include/kcl/kcl_ttm.h                       |  2 +-
 usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_drm.c       |  4 ++++
 5 files changed, 23 insertions(+), 5 deletions(-)

diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v6_0.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v6_0.c
index fd3eeb0..1f1874c 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v6_0.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_v6_0.c
@@ -1946,9 +1946,9 @@ static void dce_v6_0_cursor_reset(struct drm_crtc *crtc)
 	}
 }
 
-static void dce_v6_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
-				    u16 *blue, uint32_t start, uint32_t size)
+static kcl_crtc_gamma_set_callback(dce_v6_0_crtc_gamma_set)
 {
+  kcl_crtc_gamma_set_pre
 	struct amdgpu_crtc *amdgpu_crtc = to_amdgpu_crtc(crtc);
 	int end = (start + size > 256) ? 256 : start + size, i;
 
@@ -1959,6 +1959,7 @@ static void dce_v6_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
 		amdgpu_crtc->lut_b[i] = blue[i] >> 6;
 	}
 	dce_v6_0_crtc_load_lut(crtc);
+  kcl_crtc_gamma_set_suf
 }
 
 static void dce_v6_0_crtc_destroy(struct drm_crtc *crtc)
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_virtual.c b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_virtual.c
index 36e2094..11b98e2 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_virtual.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/amdgpu/dce_virtual.c
@@ -152,9 +152,9 @@ static void dce_virtual_bandwidth_update(struct amdgpu_device *adev)
 	return;
 }
 
-static void dce_virtual_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
-				    u16 *blue, uint32_t start, uint32_t size)
+static kcl_crtc_gamma_set_callback(dce_virtual_crtc_gamma_set)
 {
+  kcl_crtc_gamma_set_pre
 	struct amdgpu_crtc *amdgpu_crtc = to_amdgpu_crtc(crtc);
 	int end = (start + size > 256) ? 256 : start + size, i;
 
@@ -164,6 +164,7 @@ static void dce_virtual_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *gre
 		amdgpu_crtc->lut_g[i] = green[i] >> 6;
 		amdgpu_crtc->lut_b[i] = blue[i] >> 6;
 	}
+  kcl_crtc_gamma_set_suf
 }
 
 static void dce_virtual_crtc_destroy(struct drm_crtc *crtc)
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_drm.h b/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_drm.h
index 95bf640..61c38b1 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_drm.h
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_drm.h
@@ -206,4 +206,16 @@ int drm_atomic_helper_resume(struct drm_device *dev,
 
 #endif
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+#define kcl_crtc_gamma_set_callback(n) int n(struct drm_crtc *crtc, \
+    u16 *red, u16 *green, u16 *blue, uint32_t size)
+#define kcl_crtc_gamma_set_pre uint32_t start = 0;
+#define kcl_crtc_gamma_set_suf return 0;
+#else
+#define kcl_crtc_gamma_set_callback(n) void n(struct drm_crtc *crtc, \
+    u16 *red, u16 *green, u16 *blue, uint32_t start, uint32_t size)
+#define kcl_crtc_gamma_set_pre
+#define kcl_crtc_gamma_set_suf
+#endif
+
 #endif /* AMDGPU_BACKPORT_KCL_DRM_H */
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_ttm.h b/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_ttm.h
index 1d00d1d..f1c05d9 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_ttm.h
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_ttm.h
@@ -152,7 +152,7 @@ static inline int kcl_ttm_bo_move_accel_cleanup(struct ttm_buffer_object *bo,
 		bool evict, bool no_wait_gpu,
 		struct ttm_mem_reg *new_mem)
 {
-#if defined(BUILD_AS_DKMS)
+#if defined(BUILD_AS_DKMS) && (LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0))
 	return ttm_bo_move_accel_cleanup(bo, fence,
 			evict, no_wait_gpu, new_mem);
 #else
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_drm.c b/usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_drm.c
index 27d4aaa..a083c87 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_drm.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_drm.c
@@ -178,7 +178,11 @@ static inline struct drm_plane_state *
 _kcl_drm_atomic_get_existing_plane_state(struct drm_atomic_state *state,
                     struct drm_plane *plane)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 8, 0)
+    return drm_atomic_get_existing_plane_state(state, plane);
+#else
     return state->plane_states[drm_plane_index(plane)];
+#endif
 }
 
 void
-- 
2.9.0


From 4344e560b4cfe6c0d71626fe029a59f362d89ccb Mon Sep 17 00:00:00 2001
From: Jeremy Hansen <jebrhansen@gmail.com>
Date: Tue, 24 Jan 2017 18:53:16 -0500
Subject: [PATCH 11/11] use kernel fence_array in 4.8+

Thanks to corngood
---
 .../amd/backport/include/kcl/kcl_fence_array.h                 | 10 ++++++++--
 usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_fence_array.c |  2 +-
 2 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_fence_array.h b/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_fence_array.h
index bb4401e..0d9f344 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_fence_array.h
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/backport/include/kcl/kcl_fence_array.h
@@ -19,11 +19,15 @@
  * more details.
  */
 
-#ifndef __LINUX_FENCE_ARRAY_H
-#define __LINUX_FENCE_ARRAY_H
+#ifndef __KCL_FENCE_ARRAY_H
+#define __KCL_FENCE_ARRAY_H
 
 #include <linux/fence.h>
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,8,0)
+#include <linux/fence-array.h>
+#else
+
 /**
  * struct fence_array_cb - callback helper for fence array
  * @cb: fence callback structure for signaling
@@ -72,4 +76,6 @@ struct fence_array *fence_array_create(int num_fences, struct fence **fences,
 				       u64 context, unsigned seqno,
 				       bool signal_on_any);
 
+#endif
+
 #endif /* __LINUX_FENCE_ARRAY_H */
diff --git a/usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_fence_array.c b/usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_fence_array.c
index d7ee15c..1865444 100644
--- a/usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_fence_array.c
+++ b/usr/src/amdgpu-pro-16.50-362463/amd/backport/kcl_fence_array.c
@@ -21,7 +21,7 @@
 #include <linux/export.h>
 #include <linux/slab.h>
 
-#if defined(BUILD_AS_DKMS)
+#if defined(BUILD_AS_DKMS) && LINUX_VERSION_CODE < KERNEL_VERSION(4,8,0)
 static void fence_array_cb_func(struct fence *f, struct fence_cb *cb);
 
 static const char *fence_array_get_driver_name(struct fence *fence)
-- 
2.9.0

